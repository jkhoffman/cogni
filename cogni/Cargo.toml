[package]
name = "cogni"
version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
documentation.workspace = true
description = "A unified Rust library for LLM interactions"
readme = "../README.md"

[dependencies]
cogni-core = { path = "../cogni-core" }
cogni-providers = { path = "../cogni-providers", optional = true }
cogni-middleware = { path = "../cogni-middleware", optional = true }
cogni-tools = { path = "../cogni-tools", optional = true }
cogni-client = { path = "../cogni-client", optional = true }
cogni-state = { path = "../cogni-state", optional = true }
cogni-context = { path = "../cogni-context", optional = true }

[features]
default = ["providers", "tools", "client", "state", "context", "derive"]
providers = ["dep:cogni-providers"]
middleware = ["dep:cogni-middleware"]
tools = ["dep:cogni-tools"]
client = ["dep:cogni-client", "providers"]
state = ["dep:cogni-state"]
context = ["dep:cogni-context"]
derive = ["cogni-core/derive"]
full = [
  "providers",
  "middleware",
  "tools",
  "client",
  "state",
  "context",
  "derive",
]

[[test]]
name = "core_types"
path = "../tests/core_types.rs"

[[test]]
name = "tool_integration_test"
path = "../tests/tool_integration_test.rs"
required-features = ["tools", "providers"]

[[test]]
name = "tool_streaming_test"
path = "../tests/tool_streaming_test.rs"
required-features = ["tools", "providers"]

[[test]]
name = "structured_output_test"
path = "../tests/structured_output_test.rs"
required-features = ["providers", "client"]

[[test]]
name = "agentic_features_test"
path = "../tests/agentic_features_test.rs"
required-features = ["providers", "client", "state", "context"]

[[example]]
name = "basic_openai"
path = "../examples/basic_openai.rs"

[[example]]
name = "streaming_openai"
path = "../examples/streaming_openai.rs"

[[example]]
name = "multi_provider"
path = "../examples/multi_provider.rs"

[[example]]
name = "multi_provider_tools"
path = "../examples/multi_provider_tools.rs"

[[example]]
name = "provider_failover"
path = "../examples/provider_failover.rs"

[[example]]
name = "structured_output_example"
path = "../examples/structured_output_example.rs"
required-features = ["providers", "client"]

[[example]]
name = "structured_output_with_fallback"
path = "../examples/structured_output_with_fallback.rs"
required-features = ["providers", "client"]

[[example]]
name = "structured_output_derive"
path = "../examples/structured_output_derive.rs"
required-features = ["providers", "derive"]

[[example]]
name = "agentic_combined_example"
path = "../examples/agentic_combined_example.rs"
required-features = ["providers", "client", "middleware", "state", "context"]

# Client examples
[[example]]
name = "simple_chat_example"
path = "../examples/client/simple_chat_example.rs"
required-features = ["providers", "client"]

[[example]]
name = "streaming_example"
path = "../examples/client/streaming_example.rs"
required-features = ["providers", "client"]

[[example]]
name = "request_builder_example"
path = "../examples/client/request_builder_example.rs"
required-features = ["providers", "client"]

[[example]]
name = "multi_provider_client_example"
path = "../examples/client/multi_provider_client_example.rs"
required-features = ["providers", "client"]

[[example]]
name = "tools_api_demo"
path = "../examples/tools_api_demo.rs"
required-features = ["providers", "client", "tools", "derive"]

[dev-dependencies]
serde = { workspace = true }
serde_json = { workspace = true }
tokio = { workspace = true }
futures = { workspace = true }
chrono = { workspace = true }
reqwest = { workspace = true }
async-trait = { workspace = true }
criterion = { version = "0.5", features = ["async_tokio"] }
uuid = { workspace = true }
tempfile = "3.0"

[[bench]]
name = "provider_bench"
path = "../benches/provider_bench.rs"
harness = false

[[bench]]
name = "client_bench"
path = "../benches/client_bench.rs"
harness = false

[[bench]]
name = "context_bench"
path = "../benches/context_bench.rs"
harness = false
required-features = ["context"]

[[bench]]
name = "state_bench"
path = "../benches/state_bench.rs"
harness = false
required-features = ["state"]
